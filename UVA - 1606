#include<bits/stdc++.h>
using namespace std;
double pi = atan2(1.0, 0)*2.0;
struct point
{
	int x, y, color;
	double r;
	bool next;
	point() :x(0), y(0), color(0), r(0), next(false) {}
	point(double a, int col) : x(0), y(0), color(col), r(a), next(false) { if (r > 1e-8) { r -= pi, next = true; }}
}all[1100];
vector<point>angle;
int num, sum, add, ans = 0;
bool com1(point&a, point&b)
{
	return a.r < b.r;
}
void creatandsort(int i, int n)
{
	for (int j = 1; j <= n; j++)
	{
		if (j == i)
			continue;
		angle.push_back(point(atan2((double)(all[j].y - all[i].y), (double)(all[j].x - all[i].x)), all[j].color));
	}
	sort(angle.begin(), angle.end(), com1);
}
void priority(int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		if (fabs(angle[i].r - angle[0].r) < 1e-8)
		{
			sum++;
			if (angle[i].next&&angle[i].color || !angle[i].next && !angle[i].color)
				add++;
		}
		else if (!angle[i].next && angle[i].color || angle[i].next && !angle[i].color)
			num++;
	}
	ans = max(ans, max(num + sum, n - num+1));
}
int main()
{
	   //freopen("test1","r",stdin);
	   //freopen("my","w",stdout);
	int n;
	while (cin >> n && n)
	{
		ans = 0;
		for (int i = 1; i <= n; i++)
			cin >> all[i].x >> all[i].y >> all[i].color;
		if (n <= 3)
		{
			cout << n << endl;
			continue;
		}
		for (int i = 1; i <= n; i++)
		{
			add = 0, num = 1, sum = 0, angle.clear();
			creatandsort(i, n);
			priority(n);
			for (int jj = 1; jj < n - 1; jj++)
			{
				if (jj > 0 && fabs(angle[jj].r - angle[jj - 1].r) < 1e-8)
					continue;
				sum = 0;
				num += add;
				add = 0;
				int j = jj;
				for (; j < n - 1; j++)
				{
					if (fabs(angle[j].r - angle[jj].r) < 1e-8)
					{
						sum++;
						if (angle[j].next&&angle[j].color || !angle[j].next && !angle[j].color)
							add++;
						if (angle[j].next && !angle[j].color || !angle[j].next&&angle[j].color)
							num--;
					}
					else
						break;
				}
				ans = max(ans, max(num + sum, n - num+1));
			}
		}
		cout << ans << endl;
	}
	return 0;
}
