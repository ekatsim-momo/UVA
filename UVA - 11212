#include<cstdio>
#include<cstring>
#include<iostream>
#include<algorithm>
#include<map>
#include<vector>
using namespace std;
vector<int> arr;
bool brr[6][20000000];
int n;
int bad(vector<int>a)
{
	int num = 0;
	for (int j = 0; j < n-1; j++)
	{
		if (a[j]+1 != a[j+1])
			num++;
	}
	return num;
}
bool yes(int d,vector<int>a)
{
	int num = 0;
	for (int i = 0; i < n-1; i++)
	{
		num *= 8;
		num += (a[i] - 1);
	}
	if (brr[d][num])
		return true;
	else
		brr[d][num] = true;
	return false;
}
int dfs(int mmax, int d, vector<int>a)
{
	int s = bad(a);
	if (s == 0)
		return d;
	else if (s + d * 3 > 3 * mmax || yes(d,a))
		return 0;
	vector<int>b,c;
	for (int i = 1; i <=n/2; i++)
		for (int j = 0; j < n; j++)
		{
			if (n - j < i)
				break;
			else
			{
				c = a;
				c.erase(c.begin() + j, c.begin() + j + i);
				int size = n - i;
				for (int q = 0; q <= size; q++)
				{
					if (q == j)
						continue;
					else if(q!=size)
					{
						b = c;
						b.insert(b.begin() + q, a.begin() + j, a.begin() + j + i);
						s = dfs(mmax, d + 1, b);
						if (s)
							return s;
					}
					else
					{
						b = c;
						b.insert(b.end(), a.begin() + j, a.begin() + j + i);
						s = dfs(mmax, d + 1, b);
						if (s)
							return s;
					}
				}
			}
		}
	return 0;
}
int main()
{
	//freopen("my", "w", stdout);
	memset(brr, false, sizeof(brr));
	int count=0,size=0,num;
	while (cin >> n && n != 0)
	{
		size = 0;
		arr.clear();
		for (int i = 1; i <= n; i++)
		{
			cin >> num;
			arr.push_back(num);
		}
		int i;
		for (int j = 0; j < n; j++)
		{
			if (arr[j] != j+1)
				break;
			if (j == n-1)
				goto next;
		}
		for (i = 1; i <= 5; i++)
		{
			memset(brr, false, sizeof(brr));
			size = dfs(i,0,arr);
			if (size)
			{
				next:
				printf("Case %d: %d\n", ++count, size);
				break;
			}
		}
	}
	return 0;
}
