#include<bits/stdc++.h>
using namespace std;
vector<int>all[60];
bool num[60];
inline int id(char a, char b)
{
	return (a - 'A') * 2 + (b == '-' ? 1 : 0);
}
inline int id2(char a, char b)
{
	return (a - 'A') * 2 + (b == '+' ? 1 : 0);
}
void find(char a1, char a2, char b1, char b2)
{
	if (a1 == '0' || b1 == '0')
		return;
	all[id(a1, a2)].push_back(id2(b1, b2));
}
struct p
{
	bool yes[60];
	int no;
}lin, lin2;
bool bfs()
{
	memset(lin.yes, false, sizeof(lin.yes));
	queue<p>q;
	for (int i = 0; i < 52; i++)
	{
		lin.no = i;
		lin.yes[lin.no] = true;
		q.push(lin);
		lin.yes[lin.no] = false;
	}
	while (!q.empty())
	{
		lin = q.front();
		lin2 = lin;
		q.pop();
		int size = all[lin.no].size();
		for (int i = 0; i < size; i++)
		{
			if (lin.yes[all[lin.no][i]])
				return true;
			lin.yes[all[lin.no][i]] = true;
			lin.no = all[lin.no][i];
			q.push(lin);
			lin = lin2;
		}
	}
	return false;
}
int main()
{
	int n;
	string s;
	while (cin >> n)
	{
		memset(num, false, sizeof(num));
		for (int i = 0; i <= 55; i++)
			all[i].clear();
		while (n--)
		{
			cin >> s;
			for (int i = 0; i < 4; i++)
				for (int j = 0; j < 4; j++)
				{
					if (i != j)
						find(s[i * 2], s[i * 2 + 1], s[j * 2], s[j * 2 + 1]);
				}
		}
		if (!bfs())
			cout << "bounded\n";
		else
			cout << "unbounded\n";
	}
}
